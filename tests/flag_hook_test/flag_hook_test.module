<?php

/**
 * @file flag_hook_test.module
 * Test module for the hooks that Flag invokes.
 */

/**
 *
 */
function _flag_hook_test_record_invocation($hook_name) {
  $variable = variable_get('flag_hook_test_hook_tracking', array());
  $variable[] = $hook_name;
  variable_set('flag_hook_test_hook_tracking', $variable);
}

/**
 * Implements hook_flag_flag().
 */
function flag_hook_test_flag_flag($flag, $entity_id, $account, $flagging) {
  _flag_hook_test_record_invocation('hook_flag_flag');
}

/**
 * Implements hook_flag_unflag().
 */
function flag_hook_test_flag_unflag($flag, $entity_id, $account, $flagging) {
  _flag_hook_test_record_invocation('hook_flag_unflag');
}

/**
 * Implements hook_entity_presave().
 */
function flag_hook_test_entity_presave($entity, $type) {
  if ($type == 'flagging') {
    _flag_hook_test_record_invocation('hook_entity_presave');
  }
}

/**
 * Implements hook_entity_insert().
 */
function flag_hook_test_entity_insert($entity, $type) {
  if ($type == 'flagging') {
    _flag_hook_test_record_invocation('hook_entity_insert');
  }
}

/**
 * Implements hook_entity_update().
 */
function flag_hook_test_entity_update($entity, $type) {
  if ($type == 'flagging') {
    _flag_hook_test_record_invocation('hook_entity_update');
  }
}

/**
 * Implements hook_entity_delete().
 */
function flag_hook_test_entity_delete($entity, $type) {
  if ($type == 'flagging') {
    _flag_hook_test_record_invocation('hook_entity_delete');
  }
}

// ========================================================= Configuration

/**
 * Implements hook_flag_default_flags().
 */
function flag_hook_test_flag_default_flags() {
  $flags = array();
  $flags['flag_hook_test_flag'] = array (
    'entity_type' => 'node',
    'title' => 'Test Flag',
    'global' => FALSE,
    'types' => array (
      0 => 'article',
    ),
    'flag_short' => 'Flag this',
    'flag_long' => 'Flag this post',
    'flag_message' => 'This post has been flagged',
    'unflag_short' => 'Unflag this',
    'unflag_long' => 'Remove this post from your flagged items',
    'unflag_message' => 'This post has been unflagged',
    'unflag_denied_text' => 'You may not unflag this item',
    'link_type' => 'normal',
    'weight' => 0,
    'show_in_links' => array (
      'full' => TRUE,
      'teaser' => TRUE,
    ),
    'show_as_field' => FALSE,
    'show_on_form' => FALSE,
    'access_author' => '',
    'show_contextual_link' => TRUE,
    'show_on_profile' => FALSE,
    'access_uid' => '',
    'api_version' => 3,
  );
  return $flags;
}

/**
 * Implements hook_rules_action_info().
 */
function flag_hook_test_rules_action_info() {
  return array(
    'flag_test_action' => array(
      'label' => t('Flag test action'),
      'group' => t('Flag test'),
    ),
  );
}

/**
 * Test action for flagging.
 */
function flag_test_action() {
  _flag_hook_test_record_invocation('rules_event');
}

/**
 * Implements hook_default_rules_configuration().
 */
function flag_hook_test_default_rules_configuration() {
  $configs['flag_test_rule_flag'] = rules_import('{ "flag_test_rule" : {
      "LABEL" : "Flag test rule",
      "PLUGIN" : "reaction rule",
      "OWNER" : "rules",
      "REQUIRES" : [ "flag_hook_test", "flag" ],
      "ON" : { "flag_flagged_flag_hook_test_flag" : [] },
      "DO" : [ { "flag_test_action" : [] } ]
    }
  }');

  $configs['flag_test_rule_unflag'] = rules_import('{ "flag_test_rule" : {
      "LABEL" : "Flag test rule",
      "PLUGIN" : "reaction rule",
      "OWNER" : "rules",
      "REQUIRES" : [ "flag_hook_test", "flag" ],
      "ON" : { "flag_unflagged_flag_hook_test_flag" : [] },
      "DO" : [ { "flag_test_action" : [] } ]
    }
  }');

  return $configs;
}
